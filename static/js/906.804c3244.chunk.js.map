{"version":3,"file":"static/js/906.804c3244.chunk.js","mappings":"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","sources":["Components/RegisterUser/Register.js"],"sourcesContent":["import \"./register.scss\";\r\nimport { Button, DatePicker, Form, Input, message, Spin, Upload } from \"antd\";\r\nimport { LoadingOutlined, UploadOutlined } from \"@ant-design/icons\";\r\nimport {\r\n  UserOutlined,\r\n  PhoneOutlined,\r\n  MailOutlined,\r\n  LockOutlined,\r\n  UnlockOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  createUserByEmailAndPass,\r\n  createUserDocumentFromAuth,\r\n  storage,\r\n  db,\r\n} from \"../../utils/Firebase/firebase\";\r\nimport { updateProfile } from \"firebase/auth\";\r\nimport { useState } from \"react\";\r\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\r\nimport { doc, setDoc } from \"firebase/firestore\";\r\n\r\nconst RegisterUser = () => {\r\n  const [isRegister, setIsRegister] = useState(false);\r\n  const navigate = useNavigate();\r\n  const [form] = Form.useForm();\r\n  //Create authenticated user and post to Firestore\r\n  const onCreate = async (values) => {\r\n    // console.log(\"upload File >>>\", values.uploadFile);\r\n    const { email, password, dateBirth, phoneNumber, displayName, uploadFile } =\r\n      values;\r\n    const dateOfBirth = dateBirth.format(\"DD/MM/YYYY\");\r\n\r\n    //Create user with email and password\r\n    try {\r\n      setIsRegister(true);\r\n      const { user } = await createUserByEmailAndPass(email, password);\r\n      const storageRef = ref(storage, `${displayName}_${uploadFile[0].name}`);\r\n      await uploadBytesResumable(storageRef, uploadFile[0].originFileObj).then(\r\n        () => {\r\n          getDownloadURL(storageRef).then(async (downloadUrl) => {\r\n            try {\r\n              //Update profile before create user on fireStore\r\n              await updateProfile(user, {\r\n                displayName: displayName,\r\n                photoURL: downloadUrl,\r\n              });\r\n              //create User on firestore\r\n              await createUserDocumentFromAuth(user, {\r\n                dateOfBirth,\r\n                phoneNumber,\r\n                uid: user.uid,\r\n              });\r\n              //create user chat data on firestore\r\n              await setDoc(doc(db, \"userChats\", user.uid), {});\r\n              await message.success(\"Register account successed\");\r\n              setIsRegister(false);\r\n              navigate(\"/\");\r\n            } catch (err) {\r\n              console.log(\"err when create users\", err);\r\n            }\r\n          });\r\n        }\r\n      );\r\n\r\n      // console.log(user);\r\n    } catch (err) {\r\n      if (err.code === \"auth/email-already-in-use\") {\r\n        message.warning(\r\n          \"Email has already in used. Please choose another email!\"\r\n        );\r\n      } else {\r\n        console.log(\"Error from create user >>>>\", err);\r\n      }\r\n    }\r\n  };\r\n  const onSubmit = () => {\r\n    form.validateFields().then((values) => {\r\n      onCreate(values);\r\n      // form.resetFields();\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"register-form-container\">\r\n      <h1>Register account</h1>\r\n      <Form\r\n        layout=\"vertical\"\r\n        className=\"form-control register-form\"\r\n        form={form}\r\n        onFinish={onSubmit}\r\n        size=\"medium\"\r\n      >\r\n        <Form.Item\r\n          label=\"Username\"\r\n          name=\"displayName\"\r\n          className=\"register-items\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Username can not be empty! \",\r\n            },\r\n            {\r\n              min: 6,\r\n              message: \"Must be more than 6 characters\",\r\n            },\r\n            {\r\n              max: 15,\r\n              message: \"Name is too long!\",\r\n            },\r\n            {\r\n              whitespace: true,\r\n              message: \"Invalid username\",\r\n            },\r\n          ]}\r\n          hasFeedback\r\n        >\r\n          <Input prefix={<UserOutlined />} placeholder=\"Your username\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          className=\"register-items\"\r\n          label=\"Date of birth\"\r\n          name=\"dateBirth\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Date of birth can not be empty!\",\r\n            },\r\n          ]}\r\n        >\r\n          <DatePicker placeholder=\"Your birthday\" style={{ width: \"100%\" }} />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Phone number\"\r\n          name=\"phoneNumber\"\r\n          className=\"register-items\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Phone number can not be empty\",\r\n            },\r\n          ]}\r\n          hasFeedback\r\n        >\r\n          <Input\r\n            prefix={<PhoneOutlined />}\r\n            type=\"number\"\r\n            placeholder=\"Your phone number\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          className=\"register-items\"\r\n          label=\"Email\"\r\n          name=\"email\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Email can not be empty!\",\r\n            },\r\n            {\r\n              type: \"email\",\r\n              message: \"Email is invalid!\",\r\n            },\r\n          ]}\r\n          hasFeedback\r\n        >\r\n          <Input prefix={<MailOutlined />} placeholder=\"Your email \"></Input>\r\n        </Form.Item>\r\n        <Form.Item\r\n          className=\"register-items\"\r\n          label=\"Password\"\r\n          name=\"password\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Password can not be empty!\",\r\n            },\r\n\r\n            {\r\n              // Regext validate password!\r\n              validator: (_, value) => {\r\n                if (\r\n                  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/.test(\r\n                    value\r\n                  )\r\n                ) {\r\n                  return Promise.resolve();\r\n                } else {\r\n                  return Promise.reject(\r\n                    new Error(\r\n                      \"Password must be include 8 characters, at least 1 uppercase, 1 lowercase, 1 number and 1 special character!\"\r\n                    )\r\n                  );\r\n                }\r\n              },\r\n            },\r\n          ]}\r\n          hasFeedback\r\n        >\r\n          <Input.Password\r\n            prefix={<LockOutlined />}\r\n            placeholder=\"Your password\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          className=\"register-items\"\r\n          label=\"Confirm Password\"\r\n          name=\"confirm-password\"\r\n          dependencies={[\"password\"]}\r\n          rules={[\r\n            ({ getFieldValue }) => ({\r\n              validator(_, value) {\r\n                if (!value || getFieldValue(\"password\") === value) {\r\n                  return Promise.resolve();\r\n                }\r\n                return Promise.reject(\r\n                  new Error(\"The password does not match!\")\r\n                );\r\n              },\r\n            }),\r\n            {\r\n              required: true,\r\n              message: \"Confirm your password!\",\r\n            },\r\n          ]}\r\n          hasFeedback\r\n        >\r\n          <Input.Password\r\n            prefix={<UnlockOutlined />}\r\n            placeholder=\"Confirm your password\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          className=\"register-items\"\r\n          label=\"Upload avatar\"\r\n          name=\"uploadFile\"\r\n          getValueFromEvent={(e) => {\r\n            if (Array.isArray(e)) {\r\n              return e;\r\n            }\r\n            return e && e.fileList;\r\n          }}\r\n        >\r\n          <Upload\r\n            className=\"upload-img\"\r\n            beforeUpload={() => {\r\n              return false;\r\n            }}\r\n          >\r\n            <Button icon={<UploadOutlined />}>Select File</Button>\r\n          </Upload>\r\n        </Form.Item>\r\n\r\n        <button type=\"submit\" className=\"login-btn\">\r\n          {isRegister && (\r\n            <Spin\r\n              indicator={<LoadingOutlined />}\r\n              style={{ marginRight: \"5px\" }}\r\n            />\r\n          )}\r\n          SignUp\r\n        </button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\nexport default RegisterUser;\r\n"],"names":["useState","isRegister","setIsRegister","navigate","useNavigate","Form","form","onCreate","values","email","password","dateBirth","phoneNumber","displayName","uploadFile","dateOfBirth","format","createUserByEmailAndPass","user","storageRef","ref","storage","name","uploadBytesResumable","originFileObj","then","getDownloadURL","downloadUrl","updateProfile","photoURL","createUserDocumentFromAuth","uid","setDoc","doc","db","message","console","log","code","className","layout","onFinish","validateFields","size","label","rules","required","min","max","whitespace","hasFeedback","prefix","UserOutlined","placeholder","style","width","PhoneOutlined","type","MailOutlined","validator","_","value","test","Promise","resolve","reject","Error","LockOutlined","dependencies","getFieldValue","UnlockOutlined","getValueFromEvent","e","Array","isArray","fileList","beforeUpload","icon","UploadOutlined","indicator","LoadingOutlined","marginRight"],"sourceRoot":""}